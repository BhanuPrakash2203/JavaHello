using System;
using System.Collections.Generic;
using IAFG.IA.VE.Impression.Core.Interface.Formatters;
using IAFG.IA.VE.Impression.Core.Interface.ReportContext;
using IAFG.IA.VE.Impression.Illustration.Types.Definitions;
using IAFG.IA.VE.Impression.Illustration.Types.Enums;
using IAFG.IA.VE.Impression.Illustration.Types.Models;

namespace IAFG.IA.VE.Impression.Illustration.Interfaces.Business.Formatters
{
    public interface IIllustrationReportDataFormatter
    {
        string FormatPhoneNumber(string valeur);
        string FormatCurrentDate();
        string FormatCurrentLongDate();
        string FormatCurrentLongDateTime();
        string FormatDate(DateTime? value);
        string FormatDate(DateTime? value, bool inclureHeure, bool shouldBePrivate = false);
        string FormatLongDate(DateTime? value);
        string FormatLongDate(DateTime? value, bool inclureHeure, bool shouldBePrivate = false);
        string FormatCurrencyWithoutDecimal(int value);
        string FormatCurrencyWithoutDecimal(double value);
        string FormatCurrencyWithoutDecimal(float value);
        string FormatCurrency(int? value);
        string FormatCurrency(double? value);
        string FormatCurrency(float? value);
        string FormatPercentage(int value);
        string FormatPercentage(double? value);
        string FormatPercentage(float value);
        string FormatPercentageWithoutSymbol(int value);
        string FormatPercentageWithoutSymbol(double value);
        string FormatPercentageWithoutSymbol(double value, bool baseEst100);
        string FormatPercentageWithoutSymbol(float value);
        string FormatPercentageWithoutSymbol(float value, bool baseEst100);
        string FormatNoDecimal(int value);
        string FormatNoDecimal(double value);
        string FormatNoDecimal(float value);
        string FormatDecimal(int value);
        string FormatDecimal(double value);
        string FormatDecimal(double? value);
        string FormatDecimal(float value);
        string FormatNames(IEnumerable<string> names);
        string FormatFullName(string firstName, string lastName, string initial);
        string FormatFullName(string firstName, string lastName, string initial, Genre genre, string titre);
        string FormatStatutTabagisme(StatutTabagisme value);
        string FormatUsageTabac(StatutTabagisme? value);
        string FormatSexe(Sexe value, TypeAffichageSexe typeAffichage);
        string FormatTypeAssurance(TypeAssurance value);
        string FormatAge(int age);
        string FormatOuiNon(bool? valeur);
        string FormatterDuree(TypeDuree typeDuree, string duree, bool premierCharMajuscule = false);
        string FormatterDuree(TypeDuree typeDuree, int duree, bool premierCharMajuscule = false);
        string FormatterPeriode(int? anneeDebut, int? anneeFin);
        string FormatterPeriode(int? anneeDebut, int? anneeFin, bool aVieSiNull);
        string FormatterPeriodeAges(int ageDebut, int? ageFin);
        string FormatterPeriodeAnnees(int? anneeDebut, int? anneeFin);
        string FormatterPeriodeAnnees(int? anneeDebut, int? anneeFin, bool aVieSiNull);
        string FormatterPeriodeAnneeMois(int? annee, int? mois);
        string FormatterPeriodeAnneeMois(int? annee, int? mois, bool aVieSiNull);
        string FormatterProvince(string province);
        string FormatterRoleAssure(bool estContractant);
        string FormatterDescription(DefinitionTitreDescription definition, DonneesRapportIllustration donnees);
        string FormatterEnum(string nomRessource, string valeur);
        string FormatterEnum<T>(string valeur);
        string FormatterEnum<T>(int valeur);
        string FormatterEnum<T>(int valeur, bool leverErreur);
        string FormatterLibellee(DefinitionLibelle definition, IReportContext context);
        string FormatterLibellees(Dictionary<string, DefinitionLibelle> libelles, string value, IReportContext context);
        Dictionary<string, string> FormatterLibellees(Dictionary<string, DefinitionLibelle> libelles, IReportContext context);
        string FormatterLibellee(DefinitionTexteGlossaire definition, DonneesRapportIllustration donnees);
        string FormatterAvis(DefinitionAvis definition, DonneesRapportIllustration donnees);
        string FormatterNote(DefinitionNote definition, DonneesRapportIllustration donnees);
        string FormatterNote(NoteEsperanceVie noteEsperanceVie);
        string FormatterTexte(DefinitionTexte definition, DonneesRapportIllustration donnees);
        string FormatterTexte(DefinitionTexteGlossaire definition, DonneesRapportIllustration donnees);
        string FormatterTitre(DefinitionTitre definition, DonneesRapportIllustration donnees);
        string FormatterTitre(DefinitionTitreDescription definition, DonneesRapportIllustration donnees, string[] parametres = null);
        string FormatterNomProduit(Produit produit);
        string FormatterParams(string texte, IEnumerable<ParametreTexte> parametreTextes, DonneesRapportIllustration donnees, string[] parametres = null);
        string FormatterBoniInteret(ChoixBoniInteret choixBoniInteret, BoniInteret boniInteret, double? tauxBoni, int debutBoniInteret);
        string FormatterNomsAssures(IList<string> noms);
        string AddColon();
        IValueFormatter GetValueFormatter(TypeAffichageValeur valeur);
        string FormatterPeriodeAnneesDebutFin(int debut, int duree);
        string FormatterBoniFidelite(BoniFidelite boniFidelite, int debutBoniFidelite);
        string FormatDateForPrivacy(DateTime? value);
        string FormatLongDateForPrivacy(DateTime? value);
        string FormatLongDate(DateTime? date, bool forPrivacy, string nullRessourceId);
        string FormatDateEffectiveText(DateTime? date);
        string FormatNonAssurable(bool nonAssurable);
    }
}